import random as r
import sys

def print_field(cells):
    print("---------")
    print("|", cells[0], cells[1], cells[2], "|")
    print("|", cells[3], cells[4], cells[5], "|")
    print("|", cells[6], cells[7], cells[8], "|")
    print("---------")


def calculate_cord(x, y):
    return (x - 1) * 3 + y - 1


def get_cord_from_user(cells):
    while True:
        try:
            x, y = input("Enter the coordinates: ").split()
            x = int(x)
            y = int(y)
        except ValueError:
            print("You should enter numbers!")
            continue
        if 0 < x < 4 and 0 < y < 4:
            cord = calculate_cord(x, y)
        else:
            print("Coordinates should be from 1 to 3!")
            continue
        if cells[cord] == " ":
            return cord
        else:
            print("This cell is occupied! Choose another one!")


def check_game(cells):
    wins = ""
    lst = [[cells[0], cells[4], cells[8]], [cells[2], cells[4], cells[6]]]
    for i in range(3):
        lst.append(cells[i::3])
        lst.append(cells[i*3:i*3+3:])
    for i in range(len(lst)):
        if lst[i].count("X") == 3:
            wins = "X"
        if lst[i].count("O") == 3:
            wins = "O"
    if wins == "X":
        wins = 'X'
        print("X wins")
    elif wins == "O":
        print("O wins")
        wins = 'O'
    elif cells.count(" ") == 0:
        wins = ' '
        print("Draw")

    return wins


def main():
    players = input()
    X, O = start(players)
    if X == '' and O == '':
        sys.exit()
    cells = list('         ')
    print_field(cells)
    game_status = check_game(cells)
    while game_status == '':
        if X == 'user':
            cells[get_cord_from_user(cells)] = "X"
            print_field(cells)
            game_status = check_game(cells)
        elif X == 'easy':
            cells[bot_easy(cells)] = "X"
            print_field(cells)
            game_status = check_game(cells)



def bot_easy(cells):
    empty_cells = []
    for x in range(len(cells)):
        if cells[x] == ' ':
            empty_cells.append(x)
    bot_eas = r.choice(empty_cells)
    print('Making move level "easy"')
    return bot_eas


def bot_medium(cells):
    lst = [[0, 4, 8], [2, 4, 6], [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8]]
    bot_mediu = None
    for j in lst:
        line = cells[j[0]] + cells[j[1]] + cells[j[2]]
        if line.count(' ') == 1 and (line[0] == line[1] or line[1] == line[2] or line[0] == line[2]):
            idx = line.index(' ')
            bot_mediu = j[idx]
    if bot_mediu is None:
        empty_cells = []
        for x in range(len(cells)):
            if cells[x] == ' ':
                empty_cells.append(x)
        bot_mediu = r.choice(empty_cells)
    print('Making move level "medium"')
    return bot_mediu


def bot_hard(cells):
    def minimax(state, player, isMaximizing):
        scores = {
            'X': 1,
            'O': -1,
            'draw': 0
        }

        # Terminal state check
        winner = check_game(state)
        if winner == 'X':
            return scores['X']
        elif winner == 'O':
            return scores['O']
        elif winner == 'Draw':
            return scores['draw']

        if isMaximizing:
            best_score = float('-inf')
            for i, cell in enumerate(state):
                if cell == ' ':
                    state[i] = player
                    score = minimax(state, 'O' if player == 'X' else 'X', False)
                    state[i] = ' '  # Undo the move
                    best_score = max(score, best_score)
            return best_score
        else:
            best_score = float('inf')
            for i, cell in enumerate(state):
                if cell == ' ':
                    state[i] = player
                    score = minimax(state, 'O' if player == 'X' else 'X', True)
                    state[i] = ' '  # Undo the move
                    best_score = min(score, best_score)
            return best_score

    best_move = None
    best_score = float('-inf')

    for i, cell in enumerate(cells):
        if cell == ' ':
            cells_copy = cells.copy()
            cells_copy[i] = 'O'
            score = minimax(cells_copy, 'X', False)
            if score > best_score:
                best_score = score
                best_move = i

    print('Making move level "hard"')
    return best_move



def start(players):
    list_of_players = players.split()
    if list_of_players[0] == 'exit':
        return '', ''
    while len(list_of_players) != 3:
        print('Bad parameters!')
        players = input()
        list_of_players = players.split()
        if list_of_players[0] == 'exit':
            return '', ''
    player_X = list_of_players[1]
    player_O = list_of_players[2]
    return player_X, player_O


def main():
    players = input()
    X, O = start(players)
    if X == '' and O == '':
        sys.exit()
    cells = list('         ')
    print_field(cells)
    game_status = check_game(cells)
    while game_status == '':
        if X == 'user':
            cells[get_cord_from_user(cells)] = "X"
            print_field(cells)
            game_status = check_game(cells)
        if X == 'easy':
            cells[bot_easy(cells)] = "X"
            print_field(cells)
            game_status = check_game(cells)
        if X == 'medium':
            cells[bot_medium(cells)] = "X"
            print_field(cells)
            game_status = check_game(cells)
        if X == 'hard':
            cells[bot_hard(cells)] = "X"
            print_field(cells)
            game_status = check_game(cells)
        if O == 'user' and cells.count(' ') != 0:
            cells[get_cord_from_user(cells)] = "O"
            print_field(cells)
            game_status = check_game(cells)
        if O == 'easy' and cells.count(' ') != 0:
            cells[bot_easy(cells)] = "O"
            print_field(cells)
            game_status = check_game(cells)
        if O == 'medium' and cells.count(' ') != 0:
            cells[bot_medium(cells)] = "O"
            print_field(cells)
            game_status = check_game(cells)
        if O == 'hard' and cells.count(' ') != 0:
            cells[bot_hard(cells)] = "O"
            print_field(cells)
            game_status = check_game(cells)


if __name__ == '__main__':
    main()
